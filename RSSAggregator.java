import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Anish Kajan
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>"); //start of HTML doc
        out.println("<head>"); //Begin the head section
        out.println("<title>"); //print the title tag of RSS
        int titleIndex = getChildElement(channel, "title");
        String titleString = "No title"; //default for title if no title is given

        //check if the title element has no children
        if (channel.child(titleIndex).numberOfChildren() == 0) {
            out.println(titleString);
        } else {
            // Get the title from the first child of the "title" element and print it
            titleString = channel.child(titleIndex).child(0).label();
            out.println(titleString);
        }
        out.println("</title>"); //close title section
        out.println("</head>"); //close head section
        out.println("<body>"); //begin the body section
        int linkIndex = getChildElement(channel, "link");
        String linkString = channel.child(linkIndex).child(0).label(); // Extract
        //the link string from the first child of the "link" element
        out.print("<ha><a href =\""); //create a header
        out.print(linkString);
        out.print("\">");
        out.print(titleString);
        out.println("</a></h1>");//close the header
        out.println("<p>");//begin a paragraph
        int descriptionIndex = getChildElement(channel, "description");//Find the
        //index of the description child element within the channel.
        String descriptionString = "No description";
        if (channel.child(descriptionIndex).numberOfChildren() == 0) {//check if the
            //description has no children
            out.println(descriptionString);
        } else {//extract and print the description
            descriptionString = channel.child(descriptionIndex).child(0).label();
            out.println(descriptionString);
        }
        out.println("</p>");//close the paragraph tag
        out.println("<table border = \"1\">"); //start a table with a border
        out.println("<tr>");//create columns
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");//close table tag
        out.println("</body>");//close body tag
        out.println("</html>");//close HTML tag
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean isChild = false;//boolean is used to see if a child element is in a given tag
        int i = 0;
        int indexChild = -1;
        while (!isChild && i < xml.numberOfChildren()) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                indexChild = i;
                isChild = true;
            }
            i++;
        }
        return indexChild;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        int descriptionIndex = getChildElement(item, "description");

        // Publication Date
        out.println("<td>");
        if (pubDateIndex != -1 && item.child(pubDateIndex).numberOfChildren() > 0) {
            out.print(item.child(pubDateIndex).child(0).label());
        } else {
            out.print("No publication date");
        }
        out.println("</td>");

        // Source
        out.println("<td>");
        if (sourceIndex != -1 && item.child(sourceIndex).numberOfChildren() > 0) {
            out.print("<a href =\"" + item.child(sourceIndex).attributeValue("url")
                    + "\">" + item.child(sourceIndex).child(0).label() + "</a>");
        } else {
            out.print("No Source available");
        }
        out.println("</td>");

        // Title/Description
        out.println("<td>");
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            out.print("<a href=\"" + item.child(linkIndex).child(0).label() + "\">");
        }

        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            out.print(item.child(titleIndex).child(0).label());
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            out.print(item.child(descriptionIndex).child(0).label());
        } else {
            out.print("No title or description available");
        }

        if (linkIndex != -1) {
            out.println("</a>");
        }
        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        boolean isValid = true;
        XMLTree xml = new XMLTree1(url);
        xml.display();
        while (!xml.label().equals("rss") && !xml.hasAttribute("version")
                && !xml.attributeValue("version").equals("2.0")) {
            out.print("Invalid RSS feed.");
            isValid = false;
        }
        if (isValid) {
            xml = new XMLTree1(url);
            XMLTree channel = xml.child(0);
            SimpleWriter fileOut = new SimpleWriter1L(file);
            outputHeader(channel, fileOut);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).isTag()) {
                    if (channel.child(i).label().equals("item")) {
                        XMLTree item = channel.child(i);
                        processItem(item, fileOut);
                    }
                }
            }
            outputFooter(fileOut);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please enter the xml address: ");
        String xmlFileIn = in.nextLine();
        out.print("Please enter the html file name: ");
        String htmlFileIn = in.nextLine();

        XMLTree xml = new XMLTree1(xmlFileIn);
        SimpleWriter output = new SimpleWriter1L(htmlFileIn);
        if (xml.hasAttribute("title")) {
            output.println("<html><head><title>" + xml.hasAttribute("title")
                    + "</title></head>");
        }
        output.println("<body><h2>" + xml.attributeValue("title") + "</h2>");
        output.println("<ul>");
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            processFeed(xml.child(i).attributeValue("url"),
                    xml.child(i).attributeValue("file"), out);
            output.println("<li><a href =" + xml.child(i).attributeValue("file") + ">"
                    + xml.child(i).attributeValue("name") + "</a></li>");
        }
        out.println("</ul></body></html>");
        in.close();
        out.close();
        output.close();
    }
}
